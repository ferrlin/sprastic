{"name":"Sprastic","tagline":"lightweight elasticsearch client built on Akka and Spray","body":"#Sprastic - lightweight elasticsearch client built on Akka and Spray\r\n\r\n##Getting started\r\n\r\nThere are two ways to use the client. \r\n\r\n1. As a plain old ActorRef\r\n2. As an instance of a SprasticClient\r\n\r\n**As an ActorRef** (if you're using Akka in your project, you'll want to use this) :\r\n\r\n```scala\r\nval client = SprasticClient(context) // <-- this is just an ActorRef \r\nclient ! Get(\"twitter\", \"tweet\", \"1\")\r\n```\r\n\r\nIf you're using the ActorRef way, the \"client\" can be created millions of times if need be since it's simply creating a new Actor.\r\n\r\n\r\n**As a SprasticClient** (if you're not using Akka in your project, you'll have to use this):\r\n\r\n```scala\r\nval client = SprasticClient() // <-- instance of a SprasticClient\r\n\r\nimport scala.concurrent.ExecutionContext.Implicits.global\r\nimport scala.concurrent.duration._\r\nimplicit val timeout:FiniteDuration = 10.seconds\r\n\r\nclient.execute(Get(\"twitter\", \"tweet\", \"1\")) onComplete {\r\n  case Success(response) => println(response)\r\n  case Failure(failure) => println(failure)\r\n}\r\n\r\n```\r\n\r\nIf you're using the non-ActorRef variant, you'll need to create a single instance and pass it around since, internally, it creates an ActorSystem (which is expensive). You should also probably call `shutdown()` on the client when you're done with it.\r\n\r\nby default this will use the host and port specified in your config in \"sprastic\", e.g.\r\n\r\n\t\tsprastic {\r\n\t\t\thost = \"localhost\"\r\n\t\t\tport = 9200\r\n\t\t}\r\n\r\nIf you need to use a different config or have several, you can simply create a new Config and use that. For example:\r\n\r\n\r\n\t\tsprastic-production {\r\n \t\t\thost = \"production-host\"\r\n \t\t\tport = production-port\r\n\t\t}\r\n\t\t\r\n`val client = SprasticClient(context, ConfigFactory.load().getConfig(\"sprastic-production\"))`\r\n\r\n\t\tsprastic-stage {\r\n \t\t\thost = \"stage-host\"\r\n \t\t\tport = stage-port\r\n\t\t}\r\n\t\t\r\n`val client = SprasticClient(context, ConfigFactory.load().getConfig(\"stage-production\"))`\r\n\r\n**The following examples assume you're using Sprastic within your own ActorSystem. If you're not, refer to the above example which demonstrates usage outside of an ActorSystem.**\r\n\r\n\r\n##Add\r\n\r\nTo add a document with an id:\r\n\r\n`client ! Add(\"twitter\", \"tweet\", s\"\"\"{\"text\": \"chirp\"}\"\"\", Some(\"1\"))`\r\n\r\nTo add without an id (relying on elasticsearch to auto-generate one):\r\n\r\n`client ! Add(\"twitter\", \"tweet\", s\"\"\"{\"text\": \"chirp\"}\"\"\")`\r\n\r\nin both cases, you'll get back a spray.http.HttpResponse:\r\n\r\n`case response: HttpResponse => println(response)`\r\n\r\n\t\tHttpResponse(200 OK,HttpEntity(application/json; charset=UTF-8,{\"_index\":\"twitter\",\"_type\":\"tweet\",\"_id\":\"1\",\"_version\":2,\"created\":false}),List(Content-Length: 75, Content-Type: application/json; charset=UTF-8),HTTP/1.1)\r\n\t\t\r\n\t\t\r\n##Get\r\n\r\n```scala   \r\n      val client = SprasticClient(context)\r\n      client ! Get(\"twitter\", \"tweet\", \"1\")\r\n      //... in your Receive function\r\n    case response: HttpResponse =>\r\n      println(response.entity.asString)\r\n      //prints: {\"_index\":\"twitter\",\"_type\":\"tweet\",\"_id\":\"1\",\"_version\":2,\"found\":true, \"_source\" : {\"text\": \"chirp\"} }\r\n  }\r\n```","google":"UA-51075173-1","note":"Don't delete this file! It's used internally to help with page regeneration."}